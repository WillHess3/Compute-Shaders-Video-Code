// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

struct Particle {
    float2 position;
};

float3 randomColor;
RWStructuredBuffer<Particle> buffer;
int count;

float rand(float2 co) {
    return (frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453)) * 1;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    // TODO: insert actual code here!

    for (int i = 0; i < count; i++) {
        if (id.x == buffer[i].position.x && id.y == buffer[i].position.y) {
            Result[id.xy] = float4(1, 1, 1, 1);
            break;
        }
    }

    //Result[id.xy] = particles
    //Result[id.xy] = float4(rand(float2(id.x * rand(float2(randomColor.r, randomColor.g)), id.y * rand(float2(randomColor.r, randomColor.b)))), rand(float2(id.x * rand(float2(randomColor.g, randomColor.b)), id.y * rand(float2(randomColor.g, randomColor.r)))), rand(float2(id.x * rand(float2(randomColor.b, randomColor.r)), id.y * rand(float2(randomColor.b, randomColor.g)))), 1);
}
