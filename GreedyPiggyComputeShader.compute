// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
uint sitAfterR;
uint sitAfterP;

struct round {
    uint points;
    uint points16;
    float random;
};

RWStructuredBuffer<round> rounds;

bool sitAfterRolls;

float rand(float2 co) {
    return (frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453)) * 1;
}

int lowPointThreashold;

[numthreads(2,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    // TODO: insert actual code here!
    //regular simulation
    /*if (sitAfterRolls) {
        for (int i = 0; i < sitAfterR; i++) {
            uint roll = ceil(rand(float2(rounds[id.x].random, i)) * 6);
            if (roll < 5 || roll > 5) {
                rounds[id.x].points += roll;
            } else {
                rounds[id.x].points = 0;
                return;
            }
        }
    } else {
        for (int i = 0; i < 100; i++) {
            uint roll = ceil(rand(float2(rounds[id.x].random, i)) * 6);
            if (rounds[id.x].points >= sitAfterP) {
                return;
            } else if (roll < 5 || roll > 5) {
                rounds[id.x].points += roll;
            } else {
                rounds[id.x].points = 0;
                return;
            }
        }
    }*/

    ////combo sim
    //for (int i = 0; i < sitAfterR; i++) {
    //    
    //}

    bool fiveFifteenOut;
    bool sixteenOut;
    for (int i = 0; i < 100; i++) {
        uint roll = ceil(rand(float2(rounds[id.x].random, i)) * 6);
        if (rounds[id.x].points16 < 16 && !sixteenOut) {
            if (roll < 5 || roll > 5) {
                rounds[id.x].points16 += roll;
            } else {
                rounds[id.x].points16 = 0;
                sixteenOut = true;
            }
        }

        if (i < 5 && !fiveFifteenOut) {
            if (roll < 5 || roll > 5) {
                rounds[id.x].points += roll;
            } else {
                rounds[id.x].points = 0;
                fiveFifteenOut = true;
            }
        }
    }
}
